
public class Ex01 {

	public static void main(String[] args) {
		
		System.out.println("출력"); // println도 매개변수가 1개인 메소드
								   // 오버로딩 : 이름이 같은 메소드를 여러개 만들기
		
		// OOP object oriented programming
		// 추상화 다형성 상속 캡슐화
		
		// 추상화 Abstraction
		// 객체에서 공통된 속성과 행위를 추출하는 기법
		// 
		//
		
		// 다형성 Polymorphism
		// 다양한 형태로 나타날 수 있는 능력
		// 같은 클래스로 다양한 형태의 객체를 생성할 수 있는 것
		// 상위 클래스의 동작을 하위 클래스에서 다시 정의하여 사용하는 것 또한 다형성으로 볼 수 있다 (오버라이딩?)
		
		// 상속 Inheritance
		// 추상적인 클래스(부모 클래스)의 특성을 그대로 이어받아 더 구체적인 클래스(자식 클래스)를 생성하는 기법
		// 기존 코드를 그대로 재사용하거나 재정의 -> 재사용, 확장

		// 캡슐화 Encapsulation (접근제한자?)
		// 관련된 필드(속성)와 메소드(기능)를 하나로 묶고, 실제 구현 내용을 외부로부터 감추는 기법(정보은닉)
		// 만일의 상황(타인이 외부에서 조작)을 대비해서 특정 속성이나 메소드를 사용자가 조작할 수 없게 숨겨 놓은 것
		// 외부에서는 공개된 메소드(기능)를 통해 접근 할 수 있다
		
		
		
		
		// 객체지향 프로그래밍
		// 객체형태로 설계해서 구현하는 것?
		
		
		// 배열의 단점? 데이터 타입이 모두 같아야 저장할 수 있다
		// 활용1. int String을 한 묶음으로 저장하고 싶다
		// 지금은 안 된다. > 객체지향프로그래밍으로 극복해보자
		// 새로운 자료형 만들어내자!

		// 메이플 캐릭터의 정보를 저장할 자료형을 만들어보자
		// 닉네임, 레벨, 힘, 민첩, 지능, 운
		// 정보가 6개라서 변수 6개가 필요한데 비효율적이다 필요한 변수 개수 = 6 * 캐릭터 개수
		
		// 새로운 자료형 만드는 법 > 클래스를 새로 만든다?
		
		// 캐릭터 생성
		Maple m1 = new Maple(); // new 옆의 Maple을 보고 객체라고 한다. Ex01옆 Maple.java는 클래스이다.
								// 객체 : 클래스를 사용해서 만들어낸 실체 또는 메모리
		
		m1.nick = "타락파워전사";
		m1.lv = 150;
		m1.str = 999;
		m1.dex = 999;
		m1.inte = 999;
		m1.lux = 999;
		
		Maple m2 = new Maple();
//		클래스 객체명 new  클래스 : 객체 만드는 방법
		m2.nick = "asdas";
		m2.lv = 1;
		m2.str = 4;
		m2.dex = 4;
		m2.inte = 1;
		m2.lux = 1;
		
		// 클래스 Class
		// 객체(인스턴스)가 가지는 필드(속성)와 메소드(기능)를 묶어둔 하나의 단위
		// 현실의 객체를 표현하기 위한 설계도 또는 분류
		
		// 객체 Object
		// 인스턴스 Instance라고도 부른다
		// 설계도를 바탕으로 만든 제품
	
	}
}